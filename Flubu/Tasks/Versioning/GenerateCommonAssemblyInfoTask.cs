using System;
using System.IO;
using Flubu.Context;

namespace Flubu.Tasks.Versioning
{
    public class GenerateCommonAssemblyInfoTask : TaskBase
    {
        private bool _generateAssemblyVersion;
        private bool _generateAssemblyVersionSet;

        public GenerateCommonAssemblyInfoTask(string productRootDir, Version buildVersion)
        {
            ProductRootDir = productRootDir;
            BuildVersion = buildVersion;
        }

        public Version BuildVersion { get; set; }

        public string ProductRootDir { get; set; }

        public string CompanyName { get; set; }

        public string ProductName { get; set; }

        public string CompanyCopyright { get; set; }

        public string CompanyTrademark { get; set; }

        public string BuildConfiguration { get; set; }

        public bool GenerateConfigurationAttribute { get; set; }

        public bool GenerateCultureAttribute { get; set; }

        public bool GenerateAssemblyVersion
        {
            get
            {
                return _generateAssemblyVersion;
            }

            set
            {
                _generateAssemblyVersion = value;
                _generateAssemblyVersionSet = true;
            }
        }

        public int ProductVersionFieldCount { get; set; } = 2;

        public string InformationalVersion { get; set; }

        public override string Description => "Generate CommonAssemblyInfo.cs file";

        protected override int DoExecute(ITaskContext context)
        {
            if (string.IsNullOrEmpty(BuildConfiguration))
                BuildConfiguration = context.TryGet<string>(ContextPropertiesExtensions.BuildConfiguration);

            if (BuildVersion == null)
                BuildVersion = context.TryGet<Version>(ContextPropertiesExtensions.BuildVersion);

            if (string.IsNullOrEmpty(CompanyCopyright))
                CompanyCopyright = context.TryGet(ContextPropertiesExtensions.CompanyCopyright, string.Empty);

            if (string.IsNullOrEmpty(CompanyName))
                CompanyName = context.TryGet(ContextPropertiesExtensions.CompanyName, string.Empty);

            if (string.IsNullOrEmpty(CompanyTrademark))
                CompanyTrademark = context.TryGet(ContextPropertiesExtensions.CompanyTrademark, string.Empty);

            if (string.IsNullOrEmpty(ProductName))
            {
                string productId = context.TryGet<string>(ContextPropertiesExtensions.ProductId);
                ProductName = context.TryGet(ContextPropertiesExtensions.ProductName, productId);
            }

            if (string.IsNullOrEmpty(ProductRootDir))
                ProductRootDir = context.TryGet(ContextPropertiesExtensions.ProductRootDir, ".");

            if (!_generateAssemblyVersionSet)
                _generateAssemblyVersion = context.TryGet(ContextPropertiesExtensions.AutoAssemblyVersion, true);

            if (string.IsNullOrEmpty(InformationalVersion))
                InformationalVersion = context.TryGet<string>(ContextPropertiesExtensions.InformationalVersion);

            if (ProductVersionFieldCount <= 0)
                ProductVersionFieldCount = context.TryGet(ContextPropertiesExtensions.ProductVersionFieldCount, 2);

            if (BuildVersion == null)
            {
                context.Fail("Assembly file version is not set.", 1);
                return 1;
            }

            using (Stream stream = File.Open(
                Path.Combine(ProductRootDir, "CommonAssemblyInfo.cs"), FileMode.Create))
            {
                using (StreamWriter writer = new StreamWriter(stream))
                {
                    writer.WriteLine(
                        $@"using System.Reflection;
using System.Runtime.InteropServices;

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: AssemblyCompanyAttribute(""{CompanyName}"")]
[assembly: AssemblyProductAttribute(""{ProductName}"")]
[assembly: AssemblyCopyrightAttribute(""{CompanyCopyright}"")]
[assembly: AssemblyTrademarkAttribute(""{CompanyTrademark}"")]
[assembly: AssemblyFileVersionAttribute(""{BuildVersion}"")]
[assembly: ComVisible(false)]");

                    string buildVersionShort = BuildVersion.ToString(ProductVersionFieldCount);
                    string infVersion = InformationalVersion ?? buildVersionShort;

                    writer.WriteLine($"[assembly: AssemblyInformationalVersionAttribute(\"{infVersion}\")]");

                    if (_generateAssemblyVersion)
                        writer.WriteLine($"[assembly: AssemblyVersionAttribute(\"{buildVersionShort}\")]");

                    if (GenerateConfigurationAttribute)
                        writer.WriteLine($"[assembly: AssemblyConfigurationAttribute(\"{BuildConfiguration}\")]");

                    if (GenerateCultureAttribute)
                        writer.WriteLine("[assembly: AssemblyCultureAttribute(\"\")]");
                }
            }

            return 0;
        }
    }
}